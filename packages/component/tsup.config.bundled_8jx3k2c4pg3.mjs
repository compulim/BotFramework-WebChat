// tsup.config.ts
import { injectCSSPlugin } from "botframework-webchat-styles/build";
import { defineConfig } from "tsup";

// ../../esbuildBabelPluginIstanbul.ts
import { transformFileAsync } from "@babel/core";
import { join } from "path";
import { fileURLToPath } from "url";
var __injected_import_meta_url__ = "file:///workspaces/BotFramework-WebChat/esbuildBabelPluginIstanbul.ts";
var defaultPredicate = (args) => !args.path.includes("/node_modules/");
var babelPlugin = ({ filter, loader, name, predicate = defaultPredicate }) => ({
  name,
  setup(build) {
    build.onLoad({ filter }, async (args) => {
      if (!predicate(args)) {
        return;
      }
      const result = await transformFileAsync(args.path, {
        configFile: join(fileURLToPath(__injected_import_meta_url__), "../babel.profile.config.json"),
        rootMode: "root",
        sourceFileName: args.path
      });
      if (!result?.code) {
        throw new Error(`Failed to add instrumentation code to ${args.path}.`);
      }
      return { contents: result.code, loader };
    });
  }
});

// ../../tsup.base.config.ts
var env = process.env.NODE_ENV || "development";
var { npm_package_version } = process.env;
var istanbulPredicate = (args) => defaultPredicate(args) && !/\.worker\.[cm]?[jt]s$/u.test(args.path);
var baseConfig = {
  dts: true,
  env: {
    build_tool: "tsup",
    module_format: "esmodules",
    node_env: env,
    NODE_ENV: env,
    ...npm_package_version ? { npm_package_version } : {}
  },
  esbuildOptions: (options) => {
    options.legalComments = "linked";
  },
  esbuildPlugins: env === "test" ? [
    babelPlugin({
      filter: /\.[cm]?js$/u,
      loader: "jsx",
      name: "babel-plugin-istanbul:js",
      predicate: istanbulPredicate
    }),
    babelPlugin({
      filter: /\.jsx$/u,
      loader: "jsx",
      name: "babel-plugin-istanbul:jsx",
      predicate: istanbulPredicate
    }),
    babelPlugin({
      filter: /\.[cm]?ts$/u,
      loader: "ts",
      name: "babel-plugin-istanbul:ts",
      predicate: istanbulPredicate
    }),
    babelPlugin({
      filter: /\.tsx$/u,
      loader: "tsx",
      name: "babel-plugin-istanbul:tsx",
      predicate: istanbulPredicate
    })
  ] : [],
  format: "esm",
  loader: { ".js": "jsx" },
  metafile: true,
  minify: env === "production" || env === "test",
  platform: "browser",
  sourcemap: true,
  splitting: true,
  target: ["chrome100", "firefox100", "safari15"]
};
var tsup_base_config_default = baseConfig;

// src/Styles/createStyles.ts
import { makeCreateStyles } from "botframework-webchat-styles";
var componentStyleContent = "@--COMPONENT-STYLES-CONTENT--@";
var createStyles_default = makeCreateStyles(componentStyleContent);

// src/decorator/private/createStyles.ts
import { makeCreateStyles as makeCreateStyles2 } from "botframework-webchat-styles";
var decoratorStyleContent = "@--DECORATOR-STYLES-CONTENT--@";
var createStyles_default2 = makeCreateStyles2(decoratorStyleContent);

// tsup.config.ts
var config = {
  ...tsup_base_config_default,
  entry: {
    "botframework-webchat-component": "./src/index.ts",
    "botframework-webchat-component.internal": "./src/internal.ts",
    "botframework-webchat-component.decorator": "./src/decorator/index.ts"
  },
  esbuildPlugins: [
    injectCSSPlugin({ stylesPlaceholder: componentStyleContent }),
    injectCSSPlugin({ stylesPlaceholder: decoratorStyleContent })
  ],
  loader: {
    ...tsup_base_config_default.loader,
    ".css": "local-css"
  }
};
var tsup_config_default = defineConfig([
  {
    ...config,
    format: "esm"
  },
  {
    ...config,
    format: "cjs",
    target: [...config.target, "es2019"]
  }
]);
export {
  tsup_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
